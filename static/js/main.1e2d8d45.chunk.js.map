{"version":3,"sources":["eventEmitter.js","containers/Display.js","containers/DrumPad.js","components/PadSection.js","components/DrumMachine.js","App.js","serviceWorker.js","index.js"],"names":["ee","EventEmitter","Display","state","text","_this2","this","on","e","setState","react_default","a","createElement","id","Component","DrumPad","isActive","audioRef","React","createRef","play","audio","_this","current","currentTime","emit","props","name","window","addEventListener","key","toUpperCase","keyName","className","onClick","ref","src","concat","sound","PadSection","map","drumPad","index","containers_DrumPad","DrumMachine","components_PadSection","containers_Display","App","components_DrumMachine","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAIeA,EAFJ,WAAIC,GCiBAC,6MAfbC,MAAQ,CAACC,KAAM,wFAEM,IAAAC,EAAAC,KACnBN,EAAGO,GAAG,MAAO,SAAAC,GAAC,OAAIH,EAAKI,SAAS,CAACL,KAAMI,uCAIrC,OACAE,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACLP,KAAKH,MAAMC,aAVEU,aCgDPC,6MA7CXZ,MAAQ,CAACa,UAAU,KAEnBC,SAAWC,IAAMC,cAGjBC,KAAO,WACH,IAAMC,EAAQC,EAAKL,SAASM,QAC5BF,EAAMG,YAAc,EACpBH,EAAMD,OACNpB,EAAGyB,KAAK,MAAOH,EAAKI,MAAMC,0FAGV,IAAAtB,EAAAC,KAChBsB,OAAOC,iBAAiB,UAAW,SAAArB,GAC5BA,EAAEsB,IAAIC,gBAAkB1B,EAAKqB,MAAMM,SAClC3B,EAAKI,SAAS,CAACO,UAAU,MAGjCY,OAAOC,iBAAiB,QAAS,SAAArB,GAC1BA,EAAEsB,IAAIC,gBAAkB1B,EAAKqB,MAAMM,UAClC3B,EAAKI,SAAS,CAACO,UAAU,IACzBX,EAAKe,2CAMb,IAAMa,EAAY3B,KAAKH,MAAMa,SAAW,kBAAoB,WAE5D,OACAN,EAAAC,EAAAC,cAAA,OAAKsB,QAAS5B,KAAKc,KAAMP,GAAIP,KAAKoB,MAAMb,GAAIoB,UAAWA,GACpD3B,KAAKoB,MAAMM,QACZtB,EAAAC,EAAAC,cAAA,SAAOuB,IAAK7B,KAAKW,SAAUgB,UAAU,OAAOpB,GAAIP,KAAKoB,MAAMM,QAASI,IAAG,mBAAAC,OAAqB/B,KAAKoB,MAAMY,iBAlC3FxB,aC4BPyB,EA7BI,WAaf,OACI7B,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eAbK,CACb,CAACyB,MAAM,cAAeX,KAAK,UAAWd,GAAG,UAAWmB,QAAQ,KAC5D,CAACM,MAAM,cAAeX,KAAK,UAAWd,GAAG,UAAWmB,QAAQ,KAC5D,CAACM,MAAM,cAAeX,KAAK,UAAWd,GAAG,UAAWmB,QAAQ,KAC5D,CAACM,MAAM,eAAgBX,KAAK,WAAYd,GAAG,WAAYmB,QAAQ,KAC/D,CAACM,MAAM,eAAgBX,KAAK,WAAYd,GAAG,WAAYmB,QAAQ,KAC/D,CAACM,MAAM,eAAgBX,KAAK,WAAYd,GAAG,WAAYmB,QAAQ,KAC/D,CAACM,MAAM,cAAeX,KAAK,WAAYd,GAAG,WAAYmB,QAAQ,KAC9D,CAACM,MAAM,WAAYX,KAAK,OAAQd,GAAG,OAAQmB,QAAQ,KACnD,CAACM,MAAM,YAAaX,KAAK,QAASd,GAAG,QAASmB,QAAQ,MAKxCQ,IAAI,SAACC,EAASC,GACpB,OACIhC,EAAAC,EAAAC,cAAC+B,EAAD,CACA9B,GAAI4B,EAAQ5B,GACZc,KAAMc,EAAQd,KACdW,MAAOG,EAAQH,MACfR,IAAG,YAAAO,OAAcK,GACjBV,QAASS,EAAQT,cCbtBY,EARK,kBAClBlC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,gBACNH,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAAA,4BCMWmC,mLARX,OACErC,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACbvB,EAAAC,EAAAC,cAACoC,EAAD,cAJUlC,aCQEmC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1e2d8d45.chunk.js","sourcesContent":["import EventEmitter from 'events';\n\nconst ee = new EventEmitter();\n\nexport default ee;","import React, { Component } from 'react';\nimport ee from '../eventEmitter';\n\nclass Display extends Component {\n  state = {text: ''}\n\n  componentWillMount() {\n    ee.on('foo', e => this.setState({text: e}))\n  }\n\n  render() {\n      return (\n      <div id=\"display\">\n        {this.state.text}\n      </div>\n      );\n  }\n}\n\nexport default Display;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ee from '../eventEmitter';\n\nclass DrumPad extends Component {\n\n    state = {isActive: false}\n\n    audioRef = React.createRef()\n\n\n    play = () => {\n        const audio = this.audioRef.current;\n        audio.currentTime = 0;\n        audio.play();\n        ee.emit('foo', this.props.name)\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown', e => {\n            if(e.key.toUpperCase() === this.props.keyName) {\n                this.setState({isActive: true})\n            }\n        })\n        window.addEventListener('keyup', e => {\n            if(e.key.toUpperCase() === this.props.keyName) {\n                this.setState({isActive: false})\n                this.play()\n            }\n        })\n    }\n\n    render() {\n        const className = this.state.isActive ? 'drum-pad active' : 'drum-pad'\n\n        return (\n        <div onClick={this.play} id={this.props.id} className={className}>\n          {this.props.keyName}\n          <audio ref={this.audioRef} className='clip' id={this.props.keyName} src={`./assets/sounds/${this.props.sound}`} />\n        </div>\n        );\n    }\n}\n\nDrumPad.propTypes = {\n    id: PropTypes.string.isRequired,\n    keyName: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired\n}\n\nexport default DrumPad;","import React from 'react';\nimport DrumPad from '../containers/DrumPad';\n\nconst PadSection = () => {\n    const drumPads = [\n        {sound:'Chord_1.mp3', name:'Chord 1', id:'chord-1', keyName:'Q'},\n        {sound:'Chord_2.mp3', name:'Chord 2', id:'chord-2', keyName:'W'},\n        {sound:'Chord_3.mp3', name:'Chord 3', id:'chord-3', keyName:'E'},\n        {sound:'Heater-1.mp3', name:'Heater 1', id:'heater-1', keyName:'A'},\n        {sound:'Heater-2.mp3', name:'Heater 2', id:'heater-2', keyName:'S'},\n        {sound:'Heater-3.mp3', name:'Heater 3', id:'heater-3', keyName:'D'},\n        {sound:'HighHat.mp3', name:'High Hat', id:'high-hat', keyName:'Z'},\n        {sound:'Kick.mp3', name:'Kick', id:'kick', keyName:'X'},\n        {sound:'Snare.mp3', name:'Snare', id:'snare', keyName:'C'}\n\n    ]\n    return (\n        <div id=\"pad-section\">\n            {drumPads.map((drumPad, index) => {\n                return (\n                    <DrumPad \n                    id={drumPad.id} \n                    name={drumPad.name}\n                    sound={drumPad.sound}\n                    key={`drum-pad-${index}`} \n                    keyName={drumPad.keyName} />\n                ) \n            })}\n        </div>\n    )\n}\n\nexport default PadSection;","import React from 'react';\nimport Display from '../containers/Display';\nimport PadSection from './PadSection';\n\nconst DrumMachine = () => (\n  <div id=\"drum-machine\">\n    <PadSection />\n    <Display />\n    <h2>Drum Machine</h2>\n  </div>\n)\n\nexport default DrumMachine;","import React, { Component } from 'react';\nimport './App.css';\nimport DrumMachine from './components/DrumMachine';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <DrumMachine />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}